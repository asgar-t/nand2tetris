// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    And16(a=x , b=false , out=x0 ); //x = false
    Not16(in=x , out=notx );// !x
    Not16(in=x0 , out=x1 ); //x = true

     //essentially Mux4way, but with individual bits
    //instead of a bus
    Mux16(a=x , b=notx , sel=nx , out=opx1 );
    Mux16(a=x0 , b=x1 , sel= nx , out=opx2 );
    
    Mux16(a=opx1 , b=opx2 , sel=zx , out=xfinal );
    
    
//repeat for y
    And16(a=y , b=false , out=y0 ); //y = false
    Not16(in=y , out=noty );// !y
    Not16(in=y0 , out=y1 ); //y = true

    Mux16(a=y , b=noty , sel=ny , out=opy1 ); 
    Mux16(a=y0 , b=y1 , sel= ny , out=opy2 );
    
    Mux16(a=opy1 , b=opy2 , sel=zy , out=yfinal );
    
    //two options to be fed into Mux
    Add16(a =xfinal , b =yfinal , out =xplusy );
    And16(a=xfinal , b=yfinal , out=xandy );

    //f value decides which operation goes to out1
    Mux16(a=xandy , b=xplusy , sel=f , out=out1 );
    Not16(in=out1 , out=notout ); //potential output if no == 1
    
    

    Mux16(a=out1 , b=notout , sel=no , out=tempout );//temp pin for ng and zr check
    //splitting output to two busses for Or8Way
    Mux16(a=out1 , b=notout , sel=no , out[0..7]=zerocheck1,out[8..15] = zerocheck2 ); 


    Or8Way(in=zerocheck1, out=is01 );//check first part of output
    Or8Way(in=zerocheck2, out=is02 );//check second part of output

    Or(a=is01 , b=is02 , out=is0 ); //assigns zr
    Not(in=is0 , out=zr );

    And16(a=tempout , b=true , out[15]=neg );//extracts MSB (negative or not)

    Mux(a=false , b=true , sel=neg , out=ng ); //assigns ng


    Or16(a=tempout , b=false , out=out );//outputs the desired output

    




    //// Replace this comment with your code.
}